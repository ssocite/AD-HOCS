"With e as (Select id_number
  , job_title
  , fow.short_desc As fld_of_work
  , employer_name1
  ,employment.stop_dt
  ,employment.start_dt
  ,employment.job_status_code
  ,employment.primary_emp_ind
  ,tms_job_status.short_desc
    -- If there's an employer ID filled in, use the entity name
    , Case
      When employer_id_number Is Not Null And employer_id_number != ' ' Then (
        Select pref_mail_name
        From entity
        Where id_number = employer_id_number)
      -- Otherwise use the write-in field
      Else trim(employer_name1 || ' ' || employer_name2)
    End As employer_name
  From employment
  Left Join tms_fld_of_work fow
       On fow.fld_of_work_code = employment.fld_of_work_code
  Left Join tms_job_status on tms_job_status.job_status_code =
  employment.job_status_code

Where (employment.job_title like '%Chief%'
-- CTOs, CIO, CEOS, COO
or employment.job_title like '%Chief Technology Officer%'
or employment.job_title like '%CTO%'
or employment.job_title like '%Chief Information Officer%'
or employment.job_title like '%CIO%'
or employment.job_title like '%Chief Executive Officer%'
or employment.job_title like '%CEO%'
or employment.job_title like '%Chief Operating Officer%'
or employment.job_title like '%COO%'
or employment.job_title like '%Chief Marketing Officer%'
or employment.job_title like '%CMO%'
or employment.job_title like '%Chief Financial Officer%'
or employment.job_title like '%CFO%'
and employment.job_title != 'SOCIO'
and employment.job_title != 'MTS, Office of CTO')),

--- Primary Employer

pe as (select distinct e.id_number
  , e.job_title
  , e.fld_of_work
  , e.short_desc
  , e.stop_dt
  , e.start_dt
  , e.job_status_code
  , e.primary_emp_ind
  , e.employer_name
from e
where e.primary_emp_ind = 'Y'),

--- Past - Most Recent Past Employer that is C-Suite

past as (select distinct e.id_number,
max (e.short_desc) keep (dense_rank First Order By e.short_desc DESC) as short_desc,
max (e.job_status_code) keep (dense_rank First Order By e.job_status_code DESC) as job_status_code,
max (e.job_title) keep (dense_rank First Order By e.job_title DESC) as job_title,
max (e.employer_name) keep (dense_rank First Order By e.employer_name DESC) as employer_name,
max (e.fld_of_work) keep (dense_rank First Order By e.fld_of_work DESC) as fld_of_work,
max (e.start_dt) keep (dense_rank First Order By e.start_dt DESC) as start_dt,
max (e.stop_dt) keep (dense_rank First Order By e.stop_dt DESC) as stop_dt
from e
left join pe on pe.id_number = e.id_number
where e.primary_emp_ind = 'N'
and e.job_status_code != 'M'
And pe.id_number is null
group by e.id_number),


KSM_Spec AS (Select spec.ID_NUMBER,
       spec.SPECIAL_HANDLING_CONCAT,
       spec.NO_EMAIL_IND,
       spec.GAB,
       spec.TRUSTEE,
       spec.EBFA,
       spec.NO_CONTACT
From rpt_pbh634.v_entity_special_handling spec),


TP AS (SELECT TP.ID_NUMBER,
       TP.EVALUATION_RATING,
       TP.OFFICER_RATING
From nu_prs_trp_prospect TP),

assignment as (select assign.id_number,
       assign.prospect_manager,
       assign.lgos,
       assign.managers,
       assign.curr_ksm_manager
from rpt_pbh634.v_assignment_summary assign),

KSM_Give AS (Select give.ID_NUMBER,
give.NGC_LIFETIME,
give.NU_MAX_HH_LIFETIME_GIVING,
give.LAST_GIFT_DATE,
give.LAST_GIFT_ALLOC,
give.LAST_GIFT_RECOGNITION_CREDIT
from rpt_pbh634.v_ksm_giving_summary give),

assignment as (select assign.id_number,
       assign.prospect_manager,
       assign.lgos,
       assign.managers,
       assign.curr_ksm_manager
from rpt_pbh634.v_assignment_summary assign)

select house.ID_NUMBER,
       house.REPORT_NAME,
       house.FIRST_KSM_YEAR,
       house.PROGRAM,
       house.PROGRAM_GROUP,
       case when pe.id_number is not null then 'Current C-Suite' end as current_job_status,
       case when pe.id_number is not null then pe.job_title end as current_job_title,
       case when pe.id_number is not null then pe.employer_name end as current_employer_name,
       case when past.id_number is not null then 'Past C-Suite' end as past_job_status,
       case when past.id_number is not null then past.job_title end as past_job_title,
       case when past.id_number is not null then past.employer_name end as past_employer_name,
       case when past.id_number is not null then ADVANCE_NU_RPT.ksm_pkg.to_date2 (past.start_dt) end as past_start_dt,
       case when past.id_number is not null then ADVANCE_NU_RPT.ksm_pkg.to_date2 (past.stop_dt) end as past_stop_dt,
       house.HOUSEHOLD_CITY,
       house.HOUSEHOLD_STATE,
       house.HOUSEHOLD_COUNTRY,
       KG.NGC_LIFETIME,
       KG.NU_MAX_HH_LIFETIME_GIVING,
       TP.EVALUATION_RATING,
       TP.OFFICER_RATING,
       a.prospect_manager,
       a.lgos,
       k.GAB,
       k.TRUSTEE,
       k.EBFA,
       k.NO_CONTACT,
       k.NO_EMAIL_IND
from rpt_pbh634.v_entity_ksm_households house
inner join entity on entity.id_number = house.id_number
--- primary employer
left join pe on pe.id_number = house.id_number
--- past employer
left join past on past.id_number = house.ID_NUMBER
left join ksm_spec k on k.id_number = house.id_number
left join TP on TP.id_number = house.id_number
left join KSM_Give KG on KG.id_number = house.id_number
left join assignment a on a.id_number = house.id_number
where house.PROGRAM is not null
--- Remove GAB, Trustee, Executive Board
and (k.GAB is null
and k.TRUSTEE is null
and k.EBFA is null
--- No Contacts
and   k.NO_CONTACT is null)
--- Current of Past C-Suites
and (past.id_number is not null
or pe.id_number is not null)
--- Cut this down to just rated alumni
and (regexp_like (tp.evaluation_rating, '[A|B]')
or regexp_like (tp.officer_rating, '[A|B]'))

order by current_job_title ASC
